#ifndef _GameElements_NullAgent_H
#define _GameElements_NullAgent_H

#include <GameElements/Agent.h>

namespace GameElements 
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \class	NullAgent
	///
	/// \brief	Agent doing nothing but that can be instanciated.
	///
	/// \author	Fabrice Lamarche, university of Rennes 1
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class NullAgent : public Agent
	{
	public:
		typedef ::boost::intrusive_ptr<NullAgent> Pointer ;
	protected:
	public:
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	NullAgent::NullAgent(const UnitsArchetypes::Archetype * archetype)
		///
		/// \brief	Constructor.
		///
		/// \author	Fabrice Lamarche, university of Rennes 1
		/// \param	archetype	The archetype.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		NullAgent(const UnitsArchetypes::Archetype * archetype, const WeaponsArchetypes::Archetype * weaponArchetype) ;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	virtual void NullAgent::update(const Config::Real & dt);
		///
		/// \brief	Updates the given dt.
		///
		/// \author	Fabrice Lamarche, university of Rennes 1
		/// \param	dt	The dt.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void update(const Config::Real & dt) ;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	virtual void NullAgent::onCollision (const CollisionMessage & message);
		///
		/// \brief	Executes the collision action.
		///
		/// \author	Fabrice Lamarche, university of Rennes 1
		/// \param	message	The message.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual void onCollision (const CollisionMessage & message) ;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	virtual Math::Vector2<Config::Real> Agent::getVelocity() const = 0;
		///
		/// \brief	Gets the velocity of the agent.
		///
		/// \author	Fabrice Lamarche, university of Rennes 1
		/// \return	The velocity.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual Math::Vector2<Config::Real> getVelocity() const;
	};


}

#endif